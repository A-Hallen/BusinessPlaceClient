@using System.ComponentModel;
@inject IBasicViewModel ViewModel
@implements IDisposable

<header style="height: @Height;">
    <div class="bx bx-menu" @onclick=@navBarToggle id="menu-icon">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);transform: ;msFilter:;">
            <path d="M4 6h16v2H4zm0 5h16v2H4zm0 5h16v2H4z"></path>
        </svg>
    </div>

    <a href="" class="logo">@Idioma.Tienda</a>

    <ul class="navbar" style="top: @_navBarStyle;">
        <li>
            <Link href="#">
                <a>@Idioma.Tienda</a>
            </Link>
        </li>
        <li>
            <Link href="/categorias">
                <a>@Idioma.Categorias</a>
            </Link>
        </li>
        <li>
            <Link href="/productos">
                <a>@Idioma.Productos</a>
            </Link>
        </li>
        <li>
            <a>@Idioma.Contacto</a>
        </li>
    </ul>

    <div class="icons">
        <IconBoton size="medium" margin="2px">
            <div class="icon-cart" @onclick=@ToggleCart>
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);transform: ;msFilter:;"><path d="M21.822 7.431A1 1 0 0 0 21 7H7.333L6.179 4.23A1.994 1.994 0 0 0 4.333 3H2v2h2.333l4.744 11.385A1 1 0 0 0 10 17h8c.417 0 .79-.259.937-.648l3-8a1 1 0 0 0-.115-.921z"></path><circle cx="10.5" cy="19.5" r="1.5"></circle><circle cx="17.5" cy="19.5" r="1.5"></circle></svg>
                @if (ViewModel.ProductosDelCarrito.Count > 0)
                {
                    <span>@ViewModel.ProductosDelCarrito.Count()</span>
                }
            </div>
        </IconBoton>
    </div>
</header>

@code {
    [Parameter]
    public string? Height { get; set; }
    
    [Parameter]
    public EventCallback ToggleCart { get; set; }

    private string _navBarStyle = "-500px";
    private bool _IsMenuOpen = false;

    [Parameter]
    public bool IsMenuOpen
    {
        get => _IsMenuOpen;
        set
        {
            _IsMenuOpen = value;
            if (value)
            {
                _navBarStyle = "0";
            }
            else
            {
                _navBarStyle = "-500";
            }
        }
    }
    private void navBarToggle() => IsMenuOpen = !IsMenuOpen;


    protected override async Task OnInitializedAsync()
    {
        ViewModel.PropertyChanged += async (sender, e) =>
        {
            await InvokeAsync(() => StateHasChanged());
        };
        await base.OnInitializedAsync();
    }

    async void OnPropertyChangedHandler(object? sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose() => ViewModel.PropertyChanged -= OnPropertyChangedHandler;
}
